# app_np.py
import streamlit as st
import pandas as pd
import altair as alt
import json
import np_constants as c
import np_data_manager as dm
import np_calculations as calc
from uaf_styles import load_css
from pathlib import Path
import base64
from datetime import datetime
from oauth_google import ensure_login, logout_button, _google_userinfo_via_button


# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–Ü–í ---
# –í–ø–∏—à—ñ—Ç—å —Å—é–¥–∏ –ü–Ü–ë —Ç–∏—Ö, —Ö—Ç–æ –±—É–¥–µ –º–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERS = ["–ü–∞–º–ø—É—Ö–∞ –Ü–≥–æ—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á", "–õ–æ–≥—É–Ω–æ–≤ –Ü–≥–æ—Ä –Æ—Ä—ñ–π–æ–≤–∏—á"]


# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.set_page_config(layout="wide", page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –ù–ü", page_icon="favicon.ico")

# üîΩ –î–æ–¥–∞—î–º–æ —É—Ç–∏–ª—ñ—Ç—É –¥–ª—è –ø—ñ–¥–º—ñ–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
def with_pretty_headers(df: pd.DataFrame) -> pd.DataFrame:
    labels = getattr(c, "COLUMN_LABELS", {})
    return df.rename(columns=lambda col: labels.get(col, col))

def favicon_data_uri(path: str = "favicon.ico") -> str:
    p = Path(path)
    with p.open("rb") as f:
        b64 = base64.b64encode(f.read()).decode("ascii")
    # MIME –¥–ª—è .ico
    return f"data:image/x-icon;base64,{b64}"

# --- CSS –°–¢–ò–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê –ë–†–ï–ù–î–ë–£–ö–û–ú –ó–°–£ ---

load_css()

# --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –°–¢–ò–õ–Ü–í ---

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
if 'np_structure' not in st.session_state:
    st.session_state.np_structure = dm.load_np_structure()
if 'np_ratings' not in st.session_state:
    st.session_state.np_ratings = dm.initialize_np_ratings_df(st.session_state.np_structure)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –≤—Ö–æ–¥—É
if 'logged_in_user' not in st.session_state:
    st.session_state.logged_in_user = None
if 'is_admin' not in st.session_state:
    st.session_state.is_admin = False

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Ñ–æ—Ä–º–∏
if 'current_np_pib' not in st.session_state:
    st.session_state.current_np_pib = None
if 'np_form_data' not in st.session_state:
    st.session_state.np_form_data = {}
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è JSON –ø–æ–ª—ñ–≤
if 'np_ntr_articles_list' not in st.session_state: st.session_state.np_ntr_articles_list = []
if 'np_ntr_reports_list' not in st.session_state: st.session_state.np_ntr_reports_list = []
if 'np_ntr_mono_solo_list' not in st.session_state: st.session_state.np_ntr_mono_solo_list = []
if 'np_ntr_mono_team_list' not in st.session_state: st.session_state.np_ntr_mono_team_list = []
if 'np_ntr_review_articles_list' not in st.session_state: st.session_state.np_ntr_review_articles_list = []
if 'np_or_conferences_list' not in st.session_state: st.session_state.np_or_conferences_list = []
if 'np_or_olympiads_list' not in st.session_state: st.session_state.np_or_olympiads_list = []
if 'np_or_editorial_list' not in st.session_state: st.session_state.np_or_editorial_list = []


# --- –§—É–Ω–∫—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
def get_current_np_data_row(pib):
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö –¥–ª—è –ù–ü —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î session_state –¥–ª—è —Ñ–æ—Ä–º–∏."""
    if pib and not st.session_state.np_ratings.empty and pib in st.session_state.np_ratings[c.COL_PIB].values:
        np_data_row = st.session_state.np_ratings[st.session_state.np_ratings[c.COL_PIB] == pib].iloc[0].copy()
        st.session_state.np_form_data = np_data_row.to_dict()
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON –ø–æ–ª—ñ–≤
        st.session_state.np_ntr_articles_list = calc.parse_json_details(
            st.session_state.np_form_data.get(c.NP_COL_NTR_STATTI_DETAILS_JSON, '[]'))
        st.session_state.np_ntr_reports_list = calc.parse_json_details(
            st.session_state.np_form_data.get(c.NP_COL_NTR_DOPOVIDI_DETAILS_JSON, '[]'))
        st.session_state.np_ntr_mono_solo_list = calc.parse_json_details(
            st.session_state.np_form_data.get(c.NP_COL_NTR_MONO_ODNOOSIBNA_DETAILS_JSON, '[]'))
        st.session_state.np_ntr_mono_team_list = calc.parse_json_details(
            st.session_state.np_form_data.get(c.NP_COL_NTR_MONO_KOLEKTYVNA_DETAILS_JSON, '[]'))
        st.session_state.np_ntr_review_articles_list = calc.parse_json_details(
            st.session_state.np_form_data.get(c.NP_COL_NTR_RECENZ_STATTI_DETAILS_JSON, '[]'))
        st.session_state.np_or_conferences_list = calc.parse_json_details(
            st.session_state.np_form_data.get(c.NP_COL_OR_KONFERENTSII_DETAILS_JSON, '[]'))
    elif pib != st.session_state.current_np_pib:
        st.session_state.np_form_data = {}
        st.session_state.np_ntr_articles_list = []
        st.session_state.np_ntr_reports_list = []
        st.session_state.np_ntr_mono_solo_list = []
        st.session_state.np_ntr_mono_team_list = []
        st.session_state.np_ntr_review_articles_list = []
        st.session_state.np_or_conferences_list = []
    st.session_state.current_np_pib = pib


# --- –§—É–Ω–∫—Ü—ñ—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó ---
# def display_scores_summary(pib):
#     """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥—ñ–∞–≥—Ä–∞–º—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –±–∞–ª–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ù–ü."""
#     if pib and not st.session_state.np_ratings.empty and pib in st.session_state.np_ratings[c.COL_PIB].values:
#         scores = st.session_state.np_ratings[st.session_state.np_ratings[c.COL_PIB] == pib].iloc[0]
#
#         chart_data = {
#             "–ü–æ—Å—Ç—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ü–ü)": scores.get(c.NP_COL_PP_TOTAL, 0),
#             "–ù–∞—É–∫–æ–≤–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å (–ù–¢–†)": scores.get(c.NP_COL_NTR_TOTAL, 0),
#             "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å (–û–†)": scores.get(c.NP_COL_OR_TOTAL, 0),
#         }
#
#         total_score = scores.get(c.NP_COL_IB_TOTAL, 0)
#
#         st.subheader(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {total_score:.2f} –±–∞–ª—ñ–≤")
#
#         # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏
#         df_chart = pd.DataFrame.from_dict(chart_data, orient='index', columns=['–ë–∞–ª–∏'])
#         df_chart.index.name = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
#
#         st.bar_chart(df_chart)


# --- –§—É–Ω–∫—Ü—ñ—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó ---
def display_scores_summary(pib):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥—ñ–∞–≥—Ä–∞–º—É –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –±–∞–ª–∞–º–∏ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ù–ü."""
    if pib and not st.session_state.np_ratings.empty and pib in st.session_state.np_ratings[c.COL_PIB].values:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        scores = st.session_state.np_ratings[st.session_state.np_ratings[c.COL_PIB] == pib].iloc[0]
        chart_data = {
            "–ü–æ—Å—Ç—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ü–ü)": scores.get(c.NP_COL_PP_TOTAL, 0),
            "–ù–∞—É–∫–æ–≤–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å (–ù–¢–†)": scores.get(c.NP_COL_NTR_TOTAL, 0),
            "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å (–û–†)": scores.get(c.NP_COL_OR_TOTAL, 0),
        }
        total_score = scores.get(c.NP_COL_IB_TOTAL, 0)

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –±–∞–ª—ñ–≤ –ø–æ –≤—Å—ñ–º –ù–ü –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        avg_scores = st.session_state.np_ratings[[c.NP_COL_PP_TOTAL, c.NP_COL_NTR_TOTAL, c.NP_COL_OR_TOTAL]].mean().to_dict()

        # –ü–æ—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ –≤ DataFrame
        df_chart = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è": list(chart_data.keys()),
            "–í–∞—à—ñ –±–∞–ª–∏": list(chart_data.values()),
            "–°–µ—Ä–µ–¥–Ω—ñ –±–∞–ª–∏": [avg_scores.get(col, 0) for col in chart_data.keys()]
        })

        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ Altair
        base = alt.Chart(df_chart).encode(
            x=alt.X("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:N", axis=alt.Axis(labelAngle=0)),
            tooltip=["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", alt.Tooltip("–í–∞—à—ñ –±–∞–ª–∏:Q", format=".2f"), alt.Tooltip("–°–µ—Ä–µ–¥–Ω—ñ –±–∞–ª–∏:Q", format=".2f")]
        ).properties(height=300, width=300)

        bars = base.mark_bar(opacity=0.7).encode(
            y=alt.Y("–í–∞—à—ñ –±–∞–ª–∏:Q", title="–ë–∞–ª–∏"),
            color=alt.value("#FFD700")  # –ó–æ–ª–æ—Ç–∏–π –∫–æ–ª—ñ—Ä
        )

        avg_line = base.mark_rule(color="#808080").encode(
            y="–°–µ—Ä–µ–¥–Ω—ñ –±–∞–ª–∏:Q",
            size=alt.value(2)
        )

        chart = (bars + avg_line).interactive()

        st.subheader(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {total_score:.2f} –±–∞–ª—ñ–≤")
        st.altair_chart(chart, use_container_width=True)

        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —ñ–Ω—Å–∞–π—Ç
        st.text(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: –í–∏ –ø–µ—Ä–µ–≤–∏—â—É—î—Ç–µ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª —É {sum(1 for v, a in zip(chart_data.values(), avg_scores.values()) if v > a)} —ñ–∑ 3 –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")


# --- UI –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º ---
def render_np_pp_form():
    with st.expander("–î–æ–¥–∞—Ç–æ–∫ 1.2: –ü–æ—Å—Ç—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ü–ü)", expanded=False):
        # --- –ü–∞—Ä–∞ 1 & 2 ---
        col1, col2 = st.columns(2, border=True)

        with col1:
            st.subheader("üéì 1. –ù–∞—É–∫–æ–≤–∏–π —Å—Ç—É–ø—ñ–Ω—å")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_KVAL_KANDYDAT] = st.checkbox(
                "–î–∏–ø–ª–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞—É–∫ (–¥–æ–∫—Ç–æ—Ä–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó)",
                value=st.session_state.np_form_data.get(c.NP_COL_PP_KVAL_KANDYDAT, False))
            st.session_state.np_form_data[c.NP_COL_PP_KVAL_PHD_ABROAD] = st.checkbox("–ó–∞–∫–æ—Ä–¥–æ–Ω–Ω–∏–π –¥–∏–ø–ª–æ–º PhD",
                                                                                     value=st.session_state.np_form_data.get(
                                                                                         c.NP_COL_PP_KVAL_PHD_ABROAD,
                                                                                         False))
            st.session_state.np_form_data[c.NP_COL_PP_KVAL_DOCTOR] = st.checkbox("–î–∏–ø–ª–æ–º –¥–æ–∫—Ç–æ—Ä–∞ –Ω–∞—É–∫",
                                                                                 value=st.session_state.np_form_data.get(
                                                                                     c.NP_COL_PP_KVAL_DOCTOR, False))

        with col2:
            st.subheader("üë®üèΩ‚Äçüéì 2. –í—á–µ–Ω–µ –∑–≤–∞–Ω–Ω—è")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_VZVAN_STARSH_DOSL] = st.checkbox("–°—Ç–∞—Ä—à–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫ (–°–ù–°)",
                                                                                       value=st.session_state.np_form_data.get(
                                                                                           c.NP_COL_PP_VZVAN_STARSH_DOSL,
                                                                                           False))
            st.session_state.np_form_data[c.NP_COL_PP_VZVAN_DOTSENT] = st.checkbox("–î–æ—Ü–µ–Ω—Ç",
                                                                                   value=st.session_state.np_form_data.get(
                                                                                       c.NP_COL_PP_VZVAN_DOTSENT, False))
            st.session_state.np_form_data[c.NP_COL_PP_VZVAN_PROFESOR] = st.checkbox("–ü—Ä–æ—Ñ–µ—Å–æ—Ä",
                                                                                    value=st.session_state.np_form_data.get(
                                                                                        c.NP_COL_PP_VZVAN_PROFESOR, False))
        st.markdown("---")

        # --- –ü–∞—Ä–∞ 3 & 4 ---

        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üèÖ 3. –î–µ—Ä–∂–∞–≤–Ω–∞ –ø—Ä–µ–º—ñ—è")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_DERZH_PREMIYA] = st.checkbox("–õ–∞—É—Ä–µ–∞—Ç –î–µ—Ä–∂–∞–≤–Ω–æ—ó –ø—Ä–µ–º—ñ—ó",
                                                                                   value=st.session_state.np_form_data.get(
                                                                                       c.NP_COL_PP_DERZH_PREMIYA, False))

        with col2:
            st.subheader("üéñÔ∏è 4. –ü–æ—á–µ—Å–Ω–µ –∑–≤–∞–Ω–Ω—è")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_POCHESNE_ZVANNYA] = st.checkbox(
                "–ù–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—á–µ—Å–Ω–æ–≥–æ –∑–≤–∞–Ω–Ω—è (–ó–∞—Å–ª—É–∂–µ–Ω–∏–π –¥—ñ—è—á, –≤–∏–Ω–∞—Ö—ñ–¥–Ω–∏–∫, —é—Ä–∏—Å—Ç —Ç–æ—â–æ)",
                value=st.session_state.np_form_data.get(c.NP_COL_PP_POCHESNE_ZVANNYA, False))

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 5 & 6 ---

        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üèÜ 5. –ù–∞–≥–æ—Ä–æ–¥–∏")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_NAGORODY_VRU_KMU] = st.checkbox("–ì—Ä–∞–º–æ—Ç–∞ –í–†–£ / –ö–ú–£",
                                                                                      value=st.session_state.np_form_data.get(
                                                                                          c.NP_COL_PP_NAGORODY_VRU_KMU,
                                                                                          False))
            st.session_state.np_form_data[c.NP_COL_PP_NAGORODY_ORDER] = st.checkbox("–û—Ä–¥–µ–Ω (–¥–µ—Ä–∂–∞–≤–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞)",
                                                                                    value=st.session_state.np_form_data.get(
                                                                                        c.NP_COL_PP_NAGORODY_ORDER, False))
            st.session_state.np_form_data[c.NP_COL_PP_NAGORODY_VIDOVI] = st.checkbox(
                "–ó–∞–æ—Ö–æ—á–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ–º–∞–Ω–¥—É–≤–∞—á—ñ–≤ –≤–∏–¥—ñ–≤, —Ä–æ–¥—ñ–≤ –≤—ñ–π—Å—å–∫ (—Å–∏–ª)",
                value=st.session_state.np_form_data.get(c.NP_COL_PP_NAGORODY_VIDOVI, False))
            st.session_state.np_form_data[c.NP_COL_PP_NAGORODY_VIKNU] = st.checkbox(
                "–ó–∞–æ—Ö–æ—á–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –í—ñ–π—Å—å–∫–æ–≤–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É",
                value=st.session_state.np_form_data.get(c.NP_COL_PP_NAGORODY_VIKNU, False))


        with col2:
            st.subheader("üèõÔ∏è 6. –ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∞–∫–∞–¥–µ–º—ñ—è—Ö –Ω–∞—É–∫")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_NAN_CHLEN] = st.checkbox("–î—ñ–π—Å–Ω–∏–π —á–ª–µ–Ω –ù–ê–ù–£",
                                                                               value=st.session_state.np_form_data.get(
                                                                                   c.NP_COL_PP_NAN_CHLEN, False))
            st.session_state.np_form_data[c.NP_COL_PP_NAN_CHLEN_KOR] = st.checkbox("–ß–ª–µ–Ω-–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç –ù–ê–ù–£",
                                                                                   value=st.session_state.np_form_data.get(
                                                                                       c.NP_COL_PP_NAN_CHLEN_KOR, False))
            st.session_state.np_form_data[c.NP_COL_PP_NAN_HALUZEVI_AKADEMIYI] = st.checkbox("–ß–ª–µ–Ω –≥–∞–ª—É–∑–µ–≤–æ—ó –∞–∫–∞–¥–µ–º—ñ—ó –Ω–∞—É–∫",
                                                                                            value=st.session_state.np_form_data.get(
                                                                                                c.NP_COL_PP_NAN_HALUZEVI_AKADEMIYI,
                                                                                                False))
            st.session_state.np_form_data[c.NP_COL_PP_NAN_HROMADSKI] = st.checkbox("–ß–ª–µ–Ω –Ω–∞—É–∫–æ–≤–æ—ó –≥—Ä–æ–º–∞–¥—Å—å–∫–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó",
                                                                                   value=st.session_state.np_form_data.get(
                                                                                       c.NP_COL_PP_NAN_HROMADSKI, False))
        st.markdown("---")

        # --- –ü–∞—Ä–∞ 7 & 8 ---

        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üõ°Ô∏è 7. –°—Ç–∞—Ç—É—Å –£–ë–î")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_STATUS_UBD] = st.checkbox("–ù–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–∞—Ç—É—Å—É —É—á–∞—Å–Ω–∏–∫–∞ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π",
                                                                                value=st.session_state.np_form_data.get(
                                                                                    c.NP_COL_PP_STATUS_UBD, False))

        with col2:
            st.subheader("üåê 8. –£—á–∞—Å—Ç—å —É –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö –Ω–∞–≤—á–∞–Ω–Ω—è—Ö –ù–ê–¢–û")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_NAVCHANNYA_NATO_KILKIST] = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω—å",
                                                                                                 min_value=0, step=1,
                                                                                                 value=int(
                                                                                                     st.session_state.np_form_data.get(
                                                                                                         c.NP_COL_PP_NAVCHANNYA_NATO_KILKIST,
                                                                                                         0)))
        st.markdown("---")

        # --- –ü–∞—Ä–∞ 9 & 10 ---

        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üë®‚Äçüíª 9. –ß–ª–µ–Ω –≤–æ—î–Ω–Ω–æ-–Ω–∞—É–∫–æ–≤–æ—ó –≥—Ä—É–ø–∏ –Ω–∞ –û–ö–ü –±—Ä–∏–≥–∞–¥–∏")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_PP_VNG_OKP_DNIV] = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É —Å–∫–ª–∞–¥—ñ –í–ù–ì",
                                                                                      min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_PP_VNG_OKP_DNIV, 0)))


        with col2:
            st.subheader("üó£Ô∏è 10. –†—ñ–≤–µ–Ω—å –≤–æ–ª–æ–¥—ñ–Ω–Ω—è —ñ–Ω–æ–∑–µ–º–Ω–æ—é –º–æ–≤–æ—é")
            st.markdown("---")
            lang_levels = list(c.NP_POINTS_PP_INOZEMNA_MOVA.keys())
            current_level = st.session_state.np_form_data.get(c.NP_COL_PP_INOZEMNA_MOVA_RIVEN, "–ù–µ–º–∞—î")
            st.session_state.np_form_data[c.NP_COL_PP_INOZEMNA_MOVA_RIVEN] = st.selectbox("–†—ñ–≤–µ–Ω—å –°–ú–ü (CEFR)",
                                                                                          options=lang_levels,
                                                                                          index=lang_levels.index(
                                                                                              current_level))

def render_np_ntr_form():
    with st.expander("–î–æ–¥–∞—Ç–æ–∫ 1.3: –ù–∞—É–∫–æ–≤–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å (–ù–¢–†)", expanded=False):

        # --- –ü–∞—Ä–∞ 1 & 2 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üéì 1. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_ZAHYST_DOCTORSKA] = st.checkbox(
                "–ó–∞—Ö–∏—Å—Ç –¥–æ–∫—Ç–æ—Ä—Å—å–∫–æ—ó –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó",
                value=st.session_state.np_form_data.get(c.NP_COL_NTR_ZAHYST_DOCTORSKA, False))
            st.session_state.np_form_data[c.NP_COL_NTR_ZAHYST_PHD] = st.checkbox(
                "–ó–∞—Ö–∏—Å—Ç –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó –¥–æ–∫—Ç–æ—Ä–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó",
                value=st.session_state.np_form_data.get(c.NP_COL_NTR_ZAHYST_PHD, False))
        with col2:
            st.subheader("üßë‚Äçüè´ 2. –ù–∞—É–∫–æ–≤–µ –∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞–Ω–Ω—è")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_NAUK_KONSULT_ADYUNKT_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –∞–¥‚Äô—é–Ω–∫—Ç—ñ–≤ (–∞—Å–ø—ñ—Ä–∞–Ω—Ç—ñ–≤)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_NAUK_KONSULT_ADYUNKT_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_NAUK_KONSULT_DOCTORANT_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—ñ–≤", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_NAUK_KONSULT_DOCTORANT_KILKIST, 0)))

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 3 & 4 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üßê 3. –û–ø–æ–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ–π")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_OPONUVANNYA_DOCTOR_NAUK_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ–π –¥–æ–∫—Ç–æ—Ä–∞ –Ω–∞—É–∫", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_OPONUVANNYA_DOCTOR_NAUK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_OPONUVANNYA_PHD_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ–π –¥–æ–∫—Ç–æ—Ä–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_OPONUVANNYA_PHD_KILKIST, 0)))
        with col2:
            st.subheader("‚úçÔ∏è 4. –†–µ—Ü–µ–Ω–∑—É–≤–∞–Ω–Ω—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ–π")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_RECENZ_DYSERT_DOCTOR_NAUK_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å —Ä–µ—Ü–µ–Ω–∑—ñ–π –Ω–∞ –¥–∏—Å. –¥–æ–∫—Ç–æ—Ä–∞ –Ω–∞—É–∫", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_RECENZ_DYSERT_DOCTOR_NAUK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_RECENZ_DYSERT_PHD_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å —Ä–µ—Ü–µ–Ω–∑—ñ–π –Ω–∞ –¥–∏—Å. –¥–æ–∫—Ç–æ—Ä–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—ó", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_RECENZ_DYSERT_PHD_KILKIST, 0)))

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 5 & 6 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("‚úÖ 5. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–∫—Ç—É –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_PIDHOT_AKTU_VPROVADZH_KILKIST] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç—ñ–≤ (–≥–æ–ª–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—ó)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_PIDHOT_AKTU_VPROVADZH_KILKIST, 0)))
        with col2:
            st.subheader("üî¨ 6. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ù–î–†")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_NDR_DERZH_KERIVNYK_KILKIST] = st.number_input(
                "–ù–î–† –¥–µ—Ä–∂. (–∫–µ—Ä—ñ–≤–Ω–∏–∫)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_NDR_DERZH_KERIVNYK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_NDR_DERZH_VYKONAVETS_KILKIST] = st.number_input(
                "–ù–î–† –¥–µ—Ä–∂. (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_NDR_DERZH_VYKONAVETS_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_NDR_MIZHNAR_KERIVNYK_KILKIST] = st.number_input(
                "–ù–î–† –º—ñ–∂–Ω–∞—Ä. (–∫–µ—Ä—ñ–≤–Ω–∏–∫)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_NDR_MIZHNAR_KERIVNYK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_NDR_MIZHNAR_VYKONAVETS_KILKIST] = st.number_input(
                "–ù–î–† –º—ñ–∂–Ω–∞—Ä. (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_NDR_MIZHNAR_VYKONAVETS_KILKIST, 0)))

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 7 & 8 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üìù 7. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –û–ó / –†–æ–∑—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_OZ_VIDPOV_VYKONAVETS_KILKIST] = st.number_input(
                "–û–ó (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_OZ_VIDPOV_VYKONAVETS_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_OZ_VYKONAVETS_KILKIST] = st.number_input(
                "–û–ó (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å)",
                min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_OZ_VYKONAVETS_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_STANDART_KERIVNYK_KILKIST] = st.number_input(
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–∫–µ—Ä—ñ–≤–Ω–∏–∫)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_STANDART_KERIVNYK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_STANDART_VIDPOV_VYKONAVETS_KILKIST] = st.number_input(
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π)", min_value=0, step=1,
                value=int(
                    st.session_state.np_form_data.get(c.NP_COL_NTR_STANDART_VIDPOV_VYKONAVETS_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_STANDART_VYKONAVETS_KILKIST] = st.number_input(
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_STANDART_VYKONAVETS_KILKIST, 0)))
        with col2:
            st.subheader("üìÑ 8. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞ –≤–∏–¥–∞–Ω–Ω—è –Ω–∞—É–∫–æ–≤–æ—ó —Å—Ç–∞—Ç—Ç—ñ")
            st.markdown("---")
            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            article_type_options = [NEUTRAL_LABEL, "Scopus Q1", "Scopus Q2", "Scopus Q3", "Scopus Q4",
                                    "–Ü–Ω—à—ñ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –±–∞–∑–∏ (–∑–∞–∫–æ—Ä–¥–æ–Ω–Ω—ñ)", "–Ü–Ω—à—ñ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –±–∞–∑–∏ (–≤—ñ—Ç—á–∏–∑–Ω—è–Ω—ñ)",
                                    "–ó–∞–∫–æ—Ä–¥–æ–Ω–Ω—ñ (–Ω–µ—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω—ñ)", "–§–∞—Ö–æ–≤—ñ –£–∫—Ä–∞—ó–Ω–∏", "–ù–µ—Ñ–∞—Ö–æ–≤—ñ –£–∫—Ä–∞—ó–Ω–∏"]

            cols = st.columns([3, 1])
            new_article_type = cols[0].selectbox("–¢–∏–ø —Å—Ç–∞—Ç—Ç—ñ", options=article_type_options,
                                                 key="np_new_article_type")
            new_article_count = cols[1].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", min_value=1, step=1,
                                                     key="np_new_article_count")
            if st.button("–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—ñ", key="np_add_article"):
                if new_article_type != NEUTRAL_LABEL:
                    st.session_state.np_ntr_articles_list.append(
                        {"type": new_article_type, "count": new_article_count})
                    st.rerun()
                else:
                    st.warning("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å—Ç–∞—Ç—Ç—ñ –ø–µ—Ä—à –Ω—ñ–∂ –¥–æ—Ç–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é")
        if st.session_state.np_ntr_articles_list:
            st.write("–î–æ–¥–∞–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ:")
            for i, article in enumerate(st.session_state.np_ntr_articles_list):
                cols = st.columns([3, 1, 1])
                cols[0].write(f"**–¢–∏–ø:** {article['type']}")
                cols[1].write(f"**–ö-—Å—Ç—å:** {article['count']}")
                if cols[2].button("üóëÔ∏è", key=f"np_del_article_{i}"):
                    st.session_state.np_ntr_articles_list.pop(i)
                    st.rerun()

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 9 & 10 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üé§ 9. –î–æ–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞—É–∫–æ–≤–∏—Ö –∑–∞—Ö–æ–¥–∞—Ö")
            st.markdown("---")
            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            report_type_options = [NEUTRAL_LABEL, "–¢–µ–∑–∏ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π", "–¢–µ–∑–∏ –≤—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π",
                                   "–¢–µ–∑–∏ –º—ñ–∂–≤—É–∑—ñ–≤—Å—å–∫–∏—Ö (–≤—É–∑—ñ–≤—Å—å–∫–∏—Ö) –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π"]

            cols_rep = st.columns([3, 1])
            new_report_type = cols_rep[0].selectbox("–¢–∏–ø –¥–æ–ø–æ–≤—ñ–¥—ñ", options=report_type_options,
                                                    key="np_new_report_type")
            new_report_count = cols_rep[1].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", min_value=1, step=1,
                                                        key="np_new_report_count")
            if st.button("–î–æ–¥–∞—Ç–∏ –¥–æ–ø–æ–≤—ñ–¥—å", key="np_add_report"):
                if new_report_type != NEUTRAL_LABEL:
                    st.session_state.np_ntr_reports_list.append(
                        {"type": new_report_type, "count": new_report_count})
                    st.rerun()
                else:
                    st.warning("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ–ø–æ–≤—ñ–¥—ñ –ø–µ—Ä—à –Ω—ñ–∂ –¥–æ–¥–∞—Ç–∏ –¥–æ–ø–æ–≤—ñ–¥—å")
        if st.session_state.np_ntr_reports_list:
            st.write("–î–æ–¥–∞–Ω—ñ –¥–æ–ø–æ–≤—ñ–¥—ñ:")
            for i, report in enumerate(st.session_state.np_ntr_reports_list):
                cols_rep_disp = st.columns([3, 1, 1])
                cols_rep_disp[0].write(f"**–¢–∏–ø:** {report['type']}")
                cols_rep_disp[1].write(f"**–ö-—Å—Ç—å:** {report['count']}")
                if cols_rep_disp[2].button("üóëÔ∏è", key=f"np_del_report_{i}"):
                    st.session_state.np_ntr_reports_list.pop(i)
                    st.rerun()
        with col2:
            st.subheader("üí° 10. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ç–µ–Ω—Ç—É / –º–æ–¥–µ–ª—ñ")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_PATENT_KILKIST] = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ç–µ–Ω—Ç—ñ–≤",
                                                                                         min_value=0, step=1,
                                                                                         value=int(
                                                                                             st.session_state.np_form_data.get(
                                                                                                 c.NP_COL_NTR_PATENT_KILKIST,
                                                                                                 0)))

            st.session_state.np_form_data[c.NP_COL_NTR_KORYSNA_MODEL_KILKIST] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_KORYSNA_MODEL_KILKIST, 0)))

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 11 & 12 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("¬©Ô∏è 11. –ê–≤—Ç–æ—Ä—Å—å–∫–µ –ø—Ä–∞–≤–æ")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_AVTORSKE_PRAVO_KILKIST] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ–¥–æ—Ü—Ç–≤", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_AVTORSKE_PRAVO_KILKIST, 0)))
        with col2:
            st.subheader("üìñ 12. –í–∏–¥–∞–Ω–Ω—è –æ–¥–Ω–æ–æ—Å—ñ–±–Ω–æ—ó –º–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—ó")
            st.markdown("---")
            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            mono_solo_type_options = [NEUTRAL_LABEL, "–≤ —ñ–Ω–æ–∑–µ–º–Ω–æ–º—É –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤—ñ", "–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤—ñ"]
            cols_mono_s = st.columns([3, 1])
            new_mono_solo_type = cols_mono_s[0].selectbox("–¢–∏–ø –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–∞", options=mono_solo_type_options,
                                                          key="np_new_mono_solo_type")
            new_mono_solo_sheets = cols_mono_s[1].number_input("–ö-—Å—Ç—å –∞–≤—Ç–æ—Ä—Å—å–∫–∏—Ö –∞—Ä–∫—É—à—ñ–≤", min_value=0.1,
                                                               step=0.1, format="%.1f",
                                                               key="np_new_mono_solo_sheets")
            if st.button("–î–æ–¥–∞—Ç–∏ –º–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—é", key="np_add_mono_solo"):
                if new_mono_solo_type != NEUTRAL_LABEL:
                    st.session_state.np_ntr_mono_solo_list.append(
                        {"type": new_mono_solo_type, "sheets": new_mono_solo_sheets})
                    st.rerun()
                else:
                    st.warning("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–∞ –ø–µ—Ä—à –Ω—ñ–∂ –¥–æ–¥–∞–≤–∞—Ç–∏ –º–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—é.")
        if st.session_state.np_ntr_mono_solo_list:
            st.write("–î–æ–¥–∞–Ω—ñ –º–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—ó:")
            for i, mono in enumerate(st.session_state.np_ntr_mono_solo_list):
                cols_mono_s_disp = st.columns([3, 1, 1])
                cols_mono_s_disp[0].write(f"**–¢–∏–ø:** {mono['type']}")
                cols_mono_s_disp[1].write(f"**–ê—Ä–∫—É—à—ñ–≤:** {mono['sheets']}")
                if cols_mono_s_disp[2].button("üóëÔ∏è", key=f"np_del_mono_solo_{i}"):
                    st.session_state.np_ntr_mono_solo_list.pop(i)
                    st.rerun()

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 13 & 14 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üìö 13. –†–æ–∑–¥—ñ–ª —É –∫–æ–ª–µ–∫—Ç–∏–≤–Ω—ñ–π –º–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—ó")
            st.markdown("---")

            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            mono_team_type_options = [
                NEUTRAL_LABEL,
                "–≤ —ñ–Ω–æ–∑–µ–º–Ω–æ–º—É –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤—ñ",
                "–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤—ñ",
            ]

            cols_mono_t = st.columns([2, 1, 1])

            new_mono_team_type = cols_mono_t[0].selectbox(
                "–¢–∏–ø –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–∞", options=mono_team_type_options, index=0,
                key="np_new_mono_team_type",
            )

            new_mono_team_sheets = cols_mono_t[1].number_input(
                "–ö-—Å—Ç—å –∞–≤—Ç. –∞—Ä–∫—É—à—ñ–≤", min_value=0.1, step=0.1, format="%.1f",
                key="np_new_mono_team_sheets",
            )

            new_mono_team_authors = cols_mono_t[2].number_input(
                "–ö-—Å—Ç—å —Å–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤", min_value=1, step=1,
                key="np_new_mono_team_authors",
            )

            if st.button("–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª", key="np_add_mono_team"):
                if new_mono_team_type != NEUTRAL_LABEL:
                    st.session_state.np_ntr_mono_team_list.append(
                        {
                            "type": new_mono_team_type,
                            "sheets": new_mono_team_sheets,
                            "authors": new_mono_team_authors,
                        }
                    )
                    st.rerun()
                else:
                    st.warning("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏–¥–∞–≤–Ω–∏—Ü—Ç–≤–∞ –ø–µ—Ä—à –Ω—ñ–∂ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª.")

        if st.session_state.np_ntr_mono_team_list:
            st.write("–î–æ–¥–∞–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:")
            for i, mono in enumerate(st.session_state.np_ntr_mono_team_list):
                cols_mono_t_disp = st.columns([2, 1, 1, 1])
                cols_mono_t_disp[0].write(f"**–¢–∏–ø:** {mono['type']}")
                cols_mono_t_disp[1].write(f"**–ê—Ä–∫—É—à—ñ–≤:** {mono['sheets']}")
                cols_mono_t_disp[2].write(f"**–°–ø—ñ–≤–∞–≤—Ç–æ—Ä—ñ–≤:** {mono['authors']}")
                if cols_mono_t_disp[3].button("üóëÔ∏è", key=f"np_del_mono_team_{i}"):
                    st.session_state.np_ntr_mono_team_list.pop(i)
                    st.rerun()

        with col2:
            st.subheader("üîé 14. –†–µ—Ü–µ–Ω–∑—É–≤–∞–Ω–Ω—è –º–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—ó / –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∞")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_RECENZ_MONO_KILKIST] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ü–µ–Ω–∑—ñ–π",
                min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_RECENZ_MONO_KILKIST, 0)))

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 15 & 16 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üñãÔ∏è 15. –†–µ—Ü–µ–Ω–∑—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ")
            st.markdown("---")
            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            review_type_options = [NEUTRAL_LABEL, "Scopus, WoS, —Ñ–∞—Ö–æ–≤–µ –≤–∏–¥–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ê",
                                   "—Ñ–∞—Ö–æ–≤–µ –≤–∏–¥–∞–Ω–Ω—è –£–∫—Ä–∞—ó–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ë",
                                   "–∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–µ –≤–∏–¥–∞–Ω–Ω—è, —ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–µ –≤ —ñ–Ω—à–∏—Ö –±–∞–∑–∞—Ö"]

            cols_rev = st.columns([3, 1])
            new_review_type = cols_rev[0].selectbox("–¢–∏–ø –≤–∏–¥–∞–Ω–Ω—è", options=review_type_options,
                                                    key="np_new_review_type")
            new_review_count = cols_rev[1].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", min_value=1, step=1,
                                                        key="np_new_review_count")
            if st.button("–î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–Ω–∑—ñ—é", key="np_add_review"):
                if new_review_type != NEUTRAL_LABEL:
                    st.session_state.np_ntr_review_articles_list.append(
                        {"type": new_review_type, "count": new_review_count})
                    st.rerun()
                else:
                    st.warning("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏–¥–∞–Ω–Ω—è –ø–µ—Ä—â –Ω—ñ–∂ –¥–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–Ω–∑—ñ—é")
        if st.session_state.np_ntr_review_articles_list:
            st.write("–î–æ–¥–∞–Ω—ñ —Ä–µ—Ü–µ–Ω–∑—ñ—ó:")
            for i, review in enumerate(st.session_state.np_ntr_review_articles_list):
                cols_rev_disp = st.columns([3, 1, 1])
                cols_rev_disp[0].write(f"**–¢–∏–ø:** {review['type']}")
                cols_rev_disp[1].write(f"**–ö-—Å—Ç—å:** {review['count']}")
                if cols_rev_disp[2].button("üóëÔ∏è", key=f"np_del_review_{i}"):
                    st.session_state.np_ntr_review_articles_list.pop(i)
                    st.rerun()
        with col2:
            st.subheader("üë®‚Äçüè´ 16. –ö–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –Ω–∞—É–∫–æ–≤–æ—é —Ä–æ–±–æ—Ç–æ—é –∫—É—Ä—Å–∞–Ω—Ç—ñ–≤")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_KERIVNYTSTVO_NDR_KURSANTIV_KILKIST] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Å—Ç–∞—Ç—Ç—ñ, —Ç–µ–∑–∏, —Ä–æ–±–æ—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å —Ç–æ—â–æ)", min_value=0, step=1,
                value=int(
                    st.session_state.np_form_data.get(c.NP_COL_NTR_KERIVNYTSTVO_NDR_KURSANTIV_KILKIST, 0)))

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 17 & 18 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üèÜ 17. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –∫–æ–Ω–∫—É—Ä—Å—ñ–≤")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_PIDHOT_PEREMOZH_VSEUKR_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å—É", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_PIDHOT_PEREMOZH_VSEUKR_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_PIDHOT_PEREMOZH_VNUTRISH_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å—É", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_PIDHOT_PEREMOZH_VNUTRISH_KILKIST, 0)))
        with col2:
            st.subheader("üèÖ 18. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ–ª—ñ–º–ø—ñ–∞–¥")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_PIDHOT_PEREMOZH_OLIMPIADA_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö/–í—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –æ–ª—ñ–º–ø—ñ–∞–¥", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_PIDHOT_PEREMOZH_OLIMPIADA_KILKIST, 0)))

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 19 & 20 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("ü•á 19. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥–∏-–ø–µ—Ä–µ–º–æ–∂–Ω–∏—Ü—ñ")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_PIDHOT_KOMANDY_PEREMOZH_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –∫–æ–º–∞–Ω–¥-–ø–µ—Ä–µ–º–æ–∂–Ω–∏—Ü—å –∑–º–∞–≥–∞–Ω—å", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_PIDHOT_KOMANDY_PEREMOZH_KILKIST, 0)))
        with col2:
            st.subheader("üéñÔ∏è 20. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ–±–ª–∞—Å–Ω–∏—Ö –∫–æ–Ω–∫—É—Ä—Å—ñ–≤")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_PIDHOT_PEREMOZH_OBL_AKADEM_KILKIST] = st.number_input(
                "–ö-—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ–±–ª–∞—Å–Ω–æ–≥–æ, –∞–∫–∞–¥–µ–º—ñ—á–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å—É", min_value=0, step=1,
                value=int(
                    st.session_state.np_form_data.get(c.NP_COL_NTR_PIDHOT_PEREMOZH_OBL_AKADEM_KILKIST, 0)))

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 21 & 22 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üìî 21. –í–∏–¥–∞–≤–Ω–∏—á–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_VYDANNYA_PIDRUCHNYK_KILKIST] = st.number_input(
                "–ü—ñ–¥—Ä—É—á–Ω–∏–∫–∏",
                min_value=0,
                step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_VYDANNYA_PIDRUCHNYK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_VYDANNYA_POSIBNYK_KILKIST] = st.number_input(
                "–ù–∞–≤—á–∞–ª—å–Ω—ñ –ø–æ—Å—ñ–±–Ω–∏–∫–∏", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_VYDANNYA_POSIBNYK_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_VYDANNYA_DOVIDNYK_KILKIST] = st.number_input("–î–æ–≤—ñ–¥–Ω–∏–∫–∏",
                                                                                                    min_value=0,
                                                                                                    step=1,
                                                                                                    value=int(
                                                                                                        st.session_state.np_form_data.get(
                                                                                                            c.NP_COL_NTR_VYDANNYA_DOVIDNYK_KILKIST,
                                                                                                            0)))
            st.session_state.np_form_data[c.NP_COL_NTR_VYDANNYA_ZBIRNYK_KILKIST] = st.number_input("–ó–±—ñ—Ä–Ω–∏–∫–∏",
                                                                                                   min_value=0,
                                                                                                   step=1,
                                                                                                   value=int(
                                                                                                       st.session_state.np_form_data.get(
                                                                                                           c.NP_COL_NTR_VYDANNYA_ZBIRNYK_KILKIST,
                                                                                                           0)))
        with col2:
            st.subheader("üìà 22. –Ü–Ω–¥–µ–∫—Å –ì—ñ—Ä—à–∞ (Scopus/WoS)")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_HIRSCH_INDEX_VALUE] = st.number_input(
                "–ó–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É 'n'",
                min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_HIRSCH_INDEX_VALUE, 0)))

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 23 & 24 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üó£Ô∏è 23. –°–ø—ñ–∫–µ—Ä –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_SPIKER_KILKIST] = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ö–æ–¥—ñ–≤",
                                                                                         min_value=0, step=1,
                                                                                         value=int(
                                                                                             st.session_state.np_form_data.get(
                                                                                                 c.NP_COL_NTR_SPIKER_KILKIST,
                                                                                                 0)))
        with col2:
            # --- –ë–ª–æ–∫ 24-25, –æ–∫—Ä–µ–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –æ–¥–∏–Ω ---
            st.subheader("üèõÔ∏è 24-25. –†–æ–±–æ—Ç–∞ –≤ —Ä–∞–¥–∞—Ö")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_NTR_RAZOVI_RADY_GOLOVA_KILKIST] = st.number_input(
                "–†–∞–∑–æ–≤—ñ —Ä–∞–¥–∏ (–≥–æ–ª–æ–≤–∞)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_RAZOVI_RADY_GOLOVA_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_RAZOVI_RADY_CHLEN_KILKIST] = st.number_input(
                "–†–∞–∑–æ–≤—ñ —Ä–∞–¥–∏ (—á–ª–µ–Ω)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_RAZOVI_RADY_CHLEN_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_SPEC_RADY_KAND_KILKIST] = st.number_input(
                "–°–ø–µ—Ü. —Ä–∞–¥–∏ (–∫–∞–Ω–¥.)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_SPEC_RADY_KAND_KILKIST, 0)))
            st.session_state.np_form_data[c.NP_COL_NTR_SPEC_RADY_DOCTOR_KILKIST] = st.number_input(
                "–°–ø–µ—Ü. —Ä–∞–¥–∏ (–¥–æ–∫—Ç.)", min_value=0, step=1,
                value=int(st.session_state.np_form_data.get(c.NP_COL_NTR_SPEC_RADY_DOCTOR_KILKIST, 0)))


def render_np_or_form():
    with st.expander("–î–æ–¥–∞—Ç–æ–∫ 1.4: –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∞ –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å (–û–†)", expanded=False):

        # --- –ü–∞—Ä–∞ 1 & 2 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üß≠ 1. –í—ñ–π—Å—å–∫–æ–≤–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_VIYSK_PROF_ORIENT_DNIV] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –≤—ñ–¥—Ä—è–¥–∂–µ–Ω—å",
                min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_VIYSK_PROF_ORIENT_DNIV, 0)), key="num_OR_VIYSK_PROF_ORIENT_DNIV")
        with col2:
            st.subheader("ü§ù 2. –†–æ–±–æ—Ç–∞ –≤ –∫–æ–º—ñ—Å—ñ—è—Ö –ú–û–ù")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_KOMISII_MON_ZAHODIV] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ö–æ–¥—ñ–≤",
                min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_KOMISII_MON_ZAHODIV, 0)), key="num_OR_KOMISII_MON_ZAHODIV")

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 3 & 4 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üìö 3. –î—ñ—è–ª—å–Ω—ñ—Å—Ç—å —É –Ω–∞—É–∫–æ–≤–æ-–º–µ—Ç–æ–¥–∏—á–Ω–∏—Ö —Ä–∞–¥–∞—Ö")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_DIYALNIST_RADY_VIKNU_ZASIDAN] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Å—ñ–¥–∞–Ω—å (–Ω–µ –±—ñ–ª—å—à–µ 30 –±–∞–ª—ñ–≤)",
                min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_DIYALNIST_RADY_VIKNU_ZASIDAN, 0)),
                key="num_OR_DIYALNIST_RADY_VIKNU_ZASIDAN")
        with col2:
            st.subheader("üèõÔ∏è 4. –†–æ–±–æ—Ç–∞ —É —Å–∫–ª–∞–¥—ñ –≤—á–µ–Ω–æ—ó —Ä–∞–¥–∏")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_VCHENA_RADA_CHLEN_ZASIDAN] = st.number_input(
                "–ö-—Å—Ç—å –∑–∞—Å—ñ–¥–∞–Ω—å (—á–ª–µ–Ω —Ä–∞–¥–∏)",
                min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_VCHENA_RADA_CHLEN_ZASIDAN, 0)),
                    key="num_OR_VCHENA_RADA_CHLEN_ZASIDAN")
            st.session_state.np_form_data[c.NP_COL_OR_VCHENA_RADA_SEKRETAR_ZASIDAN] = st.number_input(
                "–ö-—Å—Ç—å –∑–∞—Å—ñ–¥–∞–Ω—å (—Å–µ–∫—Ä–µ—Ç–∞—Ä)",
                min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_VCHENA_RADA_SEKRETAR_ZASIDAN, 0)),
                    key="num_OR_VCHENA_RADA_SEKRETAR_ZASIDAN")

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 5 & 6 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üìã 5. –†–æ–±–æ—Ç–∞ –≤ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏—Ö, –∫–æ–Ω–∫—É—Ä—Å–Ω–∏—Ö –∫–æ–º—ñ—Å—ñ—è—Ö")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_EKSPERT_KOMISII_ZASIDAN] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Å—ñ–¥–∞–Ω—å (–Ω–µ –±—ñ–ª—å—à–µ 30 –±–∞–ª—ñ–≤)",
                min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_EKSPERT_KOMISII_ZASIDAN, 0)),
                key="num_OR_EKSPERT_KOMISII_ZASIDAN")

        with col2:
            st.subheader("üåê 6. –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π")
            st.markdown("---")

            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            conf_role_options = [
                NEUTRAL_LABEL,
                "–≥–æ–ª–æ–≤–∞ –æ—Ä–≥–∫–æ–º—ñ—Ç–µ—Ç—É",
                "–≥–æ–ª–æ–≤–∞ —Å–µ–∫—Ü—ñ—ó",
                "—á–ª–µ–Ω –æ—Ä–≥–∫–æ–º—ñ—Ç–µ—Ç—É, —Å–µ–∫—Ä–µ—Ç–∞—Ä —Å–µ–∫—Ü—ñ—ó"
            ]

            cols = st.columns([3, 1])
            new_conf_role = cols[0].selectbox(
                "–†–æ–ª—å —É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó", options=conf_role_options, index=0, key="np_new_conf_role"
            )
            new_conf_count = cols[1].number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", min_value=1, step=1, key="np_new_conf_count"
            )

            if st.button("–î–æ–¥–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó", key="np_add_conf"):
                if new_conf_role != NEUTRAL_LABEL:
                    st.session_state.np_or_conferences_list.append(
                        {"role": new_conf_role, "count": new_conf_count}
                    )
                    st.rerun()
                else:
                    st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º.")

            if st.session_state.np_or_conferences_list:
                st.write("–î–æ–¥–∞–Ω–∞ —É—á–∞—Å—Ç—å —É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è—Ö:")
                for i, conf in enumerate(st.session_state.np_or_conferences_list):
                    cols = st.columns([3, 1, 1])
                    cols[0].write(f"**–†–æ–ª—å:** {conf['role']}")
                    cols[1].write(f"**–ö-—Å—Ç—å:** {conf['count']}")
                    if cols[2].button("üóëÔ∏è", key=f"np_del_conf_{i}"):
                        st.session_state.np_or_conferences_list.pop(i)
                        st.rerun()

        st.markdown("---")
        # --- –ü–∞—Ä–∞ 7 & 8 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üèÜ 7. –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–ª—ñ–º–ø—ñ–∞–¥")
            st.markdown("---")
            olymp_role_options = ["‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî",
                                  "–≤—Å–µ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–∞ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö",
                                  "–í—ñ–π—Å—å–∫–æ–≤–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É (—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É)",
                                  "–µ–∫—Å–ø–µ—Ä—Ç–∏ –∑ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç"]

            cols = st.columns([3, 1])
            new_olymp_role = cols[0].selectbox("–†—ñ–≤–µ–Ω—å –æ–ª—ñ–º–ø—ñ–∞–¥–∏/–∫–æ–Ω–∫—É—Ä—Å—É", options=olymp_role_options,
                                               key="np_new_olymp_role",
                                               label_visibility="collapsed")
            new_olymp_count = cols[1].number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", min_value=1, step=1, key="np_new_olymp_count",
                                                   label_visibility="collapsed")

            if st.button("–î–æ–¥–∞—Ç–∏ —É—á–∞—Å—Ç—å –≤ –æ–ª—ñ–º–ø—ñ–∞–¥—ñ", key="np_add_olymp"):
                if new_olymp_role != "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî":  # ‚úÖ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—É—Å—Ç–æ–≥–æ
                    st.session_state.np_or_olympiads_list.append(
                        {"role": new_olymp_role, "count": new_olymp_count})
                    st.rerun()
                else:
                    st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –æ–ª—ñ–º–ø—ñ–∞–¥–∏.")

            if st.session_state.np_or_olympiads_list:
                st.write("–î–æ–¥–∞–Ω–∞ —É—á–∞—Å—Ç—å –≤ –æ–ª—ñ–º–ø—ñ–∞–¥–∞—Ö/–∫–æ–Ω–∫—É—Ä—Å–∞—Ö:")
                for i, olymp in enumerate(st.session_state.np_or_olympiads_list):
                    cols = st.columns([3, 1, 1])
                    cols[0].write(f"**–†—ñ–≤–µ–Ω—å:** {olymp['role']}")
                    cols[1].write(f"**–ö-—Å—Ç—å:** {olymp['count']}")
                    if cols[2].button("üóëÔ∏è", key=f"np_del_olymp_{i}"):
                        st.session_state.np_or_olympiads_list.pop(i)
                        st.rerun()

        with col2:
            st.subheader("üñãÔ∏è 8. –†–æ–±–æ—Ç–∞ —É —Ä–µ–¥–∞–∫—Ü—ñ–π–Ω–∏—Ö –∫–æ–ª–µ–≥—ñ—è—Ö")
            st.markdown("---")
            NEUTRAL_LABEL = "‚Äî –Ω–µ –æ–±—Ä–∞–Ω–æ ‚Äî"
            editorial_role_options = [
                NEUTRAL_LABEL,
                "–≤–∏–¥–∞–Ω–Ω—è—Ö, —â–æ —ñ–Ω–¥–µ–∫—Å—É—é—Ç—å—Å—è –≤ Scopus —Ç–∞ WoS",
                "–≤ –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–∏—Ö –≤–∏–¥–∞–Ω–Ω—è—Ö, —ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–∏—Ö –Ω–∞—É–∫–æ–º–µ—Ç—Ä–∏—á–Ω–∏–º–∏ –±–∞–∑–∞–º–∏",
                "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ñ–∞—Ö–æ–≤–∏—Ö –≤–∏–¥–∞–Ω–Ω—è—Ö",
            ]

            cols = st.columns([3, 1])

            new_editorial_role = cols[0].selectbox(
                "–¢–∏–ø –≤–∏–¥–∞–Ω–Ω—è", options=editorial_role_options,
                index=0,  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                key="np_new_editorial_role", label_visibility="collapsed")

            new_editorial_count = cols[1].number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", min_value=1, step=1, key="np_new_editorial_count", label_visibility="collapsed")

            if st.button("–î–æ–¥–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–µ–¥–∫–æ–ª–µ–≥—ñ—ó", key="np_add_editorial"):
                if new_editorial_role != NEUTRAL_LABEL:
                    st.session_state.np_or_editorial_list.append(
                        {"role": new_editorial_role, "count": new_editorial_count}
                    )
                    st.rerun()
                else:
                    st.warning("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏–¥–∞–Ω–Ω—è –ø–µ—Ä—à –Ω—ñ–∂ –¥–æ–¥–∞–≤–∞—Ç–∏ –∑–∞–ø–∏—Å.")

            if st.session_state.np_or_editorial_list:
                st.write("–î–æ–¥–∞–Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–µ–¥–∫–æ–ª–µ–≥—ñ—è—Ö:")
                for i, editorial in enumerate(st.session_state.np_or_editorial_list):
                    cols = st.columns([3, 1, 1])
                    cols[0].write(f"**–¢–∏–ø:** {editorial['role']}")
                    cols[1].write(f"**–ö-—Å—Ç—å:** {editorial['count']}")
                    if cols[2].button("üóëÔ∏è", key=f"np_del_editorial_{i}"):
                        st.session_state.np_or_editorial_list.pop(i)
                        st.rerun()

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 9 & 11 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üì∞ 9. –†–æ–±–æ—Ç–∞ –∑ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞—É–∫–æ–≤–∏—Ö –≤–∏–¥–∞–Ω—å")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_FORMUVANNYA_VISNYK_KILKIST] = st.number_input(
                "–í—ñ—Å–Ω–∏–∫ –ö–ù–£ (–∫-—Å—Ç—å –≤–∏–¥–∞–Ω—å)", min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_FORMUVANNYA_VISNYK_KILKIST, 0)),
                    key="num_OR_FORMUVANNYA_VISNYK_KILKIST")
            st.session_state.np_form_data[c.NP_COL_OR_FORMUVANNYA_ZBIRNYK_VIKNU_KILKIST] = st.number_input(
                "–ó–±—ñ—Ä–Ω–∏–∫ –ø—Ä–∞—Ü—å –í–Ü (–∫-—Å—Ç—å –≤–∏–¥–∞–Ω—å)", min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_FORMUVANNYA_ZBIRNYK_VIKNU_KILKIST, 0)),
                    key="num_OR_FORMUVANNYA_ZBIRNYK_VIKNU_KILKIST")
        with col2:
            st.subheader("üìù 11. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å (–ø–æ–∑–∞ –ù–î–†)")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_OZ_INSHI_ARK_NPP] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä—Å—å–∫–∏—Ö –∞—Ä–∫—É—à—ñ–≤", min_value=0.0, step=0.1, format="%.1f", value=float(
                    st.session_state.np_form_data.get(c.NP_COL_OR_OZ_INSHI_ARK_NPP, 0.0)),
                    key="num_OR_OZ_INSHI_ARK_NPP")

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 12 & 13 ---
        col1, col2 = st.columns(2, border=True)
        with col1:
            st.subheader("üó£Ô∏è 12. –õ—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (—É—Å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥)")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_LINGVO_USNYJ_DNIV] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤", min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_LINGVO_USNYJ_DNIV, 0)),
                    key="num_OR_LINGVO_USNYJ_DNIV")
        with col2:
            st.subheader("‚úçÔ∏è 13. –õ—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (–ø–∏—Å—å–º–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥)")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_LINGVO_PYSPOVYJ_STORINOK] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ü—å–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (–ø–æ—Ä—Ü—ñ—ó –ø–æ 4)", min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_LINGVO_PYSPOVYJ_STORINOK, 0)),
                    key="num_OR_LINGVO_PYSPOVYJ_STORINOK")

        st.markdown("---")

        # --- –ü–∞—Ä–∞ 14 & ---
        with st.container(border=True):
            st.subheader("üìà 14. –ü—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó")
            st.markdown("---")
            st.session_state.np_form_data[c.NP_COL_OR_PIDV_KVAL_KILKIST] = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤", min_value=0, step=1, value=int(
                    st.session_state.np_form_data.get(c.NP_COL_OR_PIDV_KVAL_KILKIST, 0)),
                    key="num_OR_PIDV_KVAL_KILKIST")


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ ---
def render_np_input_form_main():
    pib = st.session_state.current_np_pib
    if not pib:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–∞—É–∫–æ–≤–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞.")
        return

    st.header(f"–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {pib}")

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
    display_scores_summary(pib)
    st.markdown("---")

    render_np_pp_form()
    render_np_ntr_form()
    render_np_or_form()

    st.markdown("---")
    if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –ù–ü", key="save_np_data"):
        idx = st.session_state.np_ratings.index[st.session_state.np_ratings[c.COL_PIB] == pib].tolist()[0]

        # –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JSON
        st.session_state.np_form_data[c.NP_COL_NTR_STATTI_DETAILS_JSON] = json.dumps(
            st.session_state.np_ntr_articles_list, ensure_ascii=False)
        st.session_state.np_form_data[c.NP_COL_NTR_DOPOVIDI_DETAILS_JSON] = json.dumps(
            st.session_state.np_ntr_reports_list, ensure_ascii=False)
        st.session_state.np_form_data[c.NP_COL_NTR_MONO_ODNOOSIBNA_DETAILS_JSON] = json.dumps(
            st.session_state.np_ntr_mono_solo_list, ensure_ascii=False)
        st.session_state.np_form_data[c.NP_COL_NTR_MONO_KOLEKTYVNA_DETAILS_JSON] = json.dumps(
            st.session_state.np_ntr_mono_team_list, ensure_ascii=False)
        st.session_state.np_form_data[c.NP_COL_NTR_RECENZ_STATTI_DETAILS_JSON] = json.dumps(
            st.session_state.np_ntr_review_articles_list, ensure_ascii=False)
        st.session_state.np_form_data[c.NP_COL_OR_KONFERENTSII_DETAILS_JSON] = json.dumps(
            st.session_state.np_or_conferences_list, ensure_ascii=False)

        for key, value in st.session_state.np_form_data.items():
            if key in st.session_state.np_ratings.columns:
                st.session_state.np_ratings.loc[idx, key] = value
        updated_row = calc.calculate_all_scores_for_np(st.session_state.np_ratings.loc[idx])
        for col in [c.NP_COL_PP_TOTAL, c.NP_COL_NTR_TOTAL, c.NP_COL_OR_TOTAL, c.NP_COL_IB_TOTAL]:
            st.session_state.np_ratings.loc[idx, col] = updated_row[col]
        dm.save_np_ratings(st.session_state.np_ratings)
        st.success(f"–î–∞–Ω—ñ –¥–ª—è {pib} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        st.rerun()


# --- –ù–∞–≤—ñ–≥–∞—Ü—ñ—è —Ç–∞ –ª–æ–≥—ñ–∫–∞ —Ä–æ–∑–¥—ñ–ª—ñ–≤ ---
# --- –ï–∫—Ä–∞–Ω –≤—Ö–æ–¥—É ---
def login_screen():
    icon_uri = favicon_data_uri("favicon.ico")
    st.markdown(
        f"""<div style="display:flex;align-items:center;gap:18px;">
                <img src="{icon_uri}" width="50" height="50" />
                <span style="font-size:2.4rem;font-weight:700;color:black;">–°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –ù–ü</span>
            </div>""",
        unsafe_allow_html=True
    )
    st.header("–í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏")

    if st.session_state.np_structure.empty:
        st.error("–°–ø–∏—Å–æ–∫ –Ω–∞—É–∫–æ–≤–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admin_pibs = set(ADMIN_USERS)
    ensure_login(st.session_state.np_structure, admin_pibs=admin_pibs)

    if st.session_state.get("logged_in_user"):
        st.success(f"–í—ñ—Ç–∞—î–º–æ, {st.session_state.logged_in_user}! –í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏.")
    else:
        left, _ = st.columns([6, 6])
        with left:
            st.markdown('<div id="login-google" class="uaf-login-button">', unsafe_allow_html=True)
            userinfo = _google_userinfo_via_button(button_label="üîê –£–≤—ñ–π—Ç–∏ –∑ Google")
            st.markdown('</div>', unsafe_allow_html=True)
        st.info("–£–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ Google (–¥–æ–º–µ–Ω @knu.ua).")

    logout_button("–í–∏–π—Ç–∏")

    st.markdown('<div class="uaf-login-placeholder"></div>', unsafe_allow_html=True)


# --- –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ ---
def main_app():
    icon_uri = favicon_data_uri("favicon.ico")
    st.sidebar.markdown(

        f"""<div style="display:flex;align-items:center;gap:8px;">
                <img src="{icon_uri}" width="30" height="30" />
                <span style="font-size:1.4rem;font-weight:700;color:white;">–ù–∞–≤—ñ–≥–∞—Ü—ñ—è</span>
            </div>
            """,
        unsafe_allow_html=True
    )
    ensure_login(st.session_state.np_structure)

    st.sidebar.success(f"–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫: **{st.session_state.logged_in_user}**")

    if st.session_state.is_admin:
        st.sidebar.warning("–í–∏ –≤ —Ä–µ–∂–∏–º—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π –º–µ–Ω—é
    if st.session_state.is_admin:
        menu_options = ["üè† –ì–æ–ª–æ–≤–Ω–∞", "üìù –í–≤–µ–¥–µ–Ω–Ω—è/–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö", "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ù–ü", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü"]
    else:
        menu_options = ["üè† –ì–æ–ª–æ–≤–Ω–∞", "üìù –í–≤–µ–¥–µ–Ω–Ω—è/–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"]

    choice = st.sidebar.radio("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", menu_options)


    if st.sidebar.button("–í–∏–π—Ç–∏"):
        st.session_state.logged_in_user = None
        st.session_state.is_admin = False
        st.rerun()

    if choice == "üè† –ì–æ–ª–æ–≤–Ω–∞":
        st.title("–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞")
        st.write(f"–í—ñ—Ç–∞—î–º–æ, {st.session_state.logged_in_user}!")
        st.info("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –ª—ñ–≤–æ—Ä—É—á –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")

    elif choice == "üìù –í–≤–µ–¥–µ–Ω–Ω—è/–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö":
        if st.session_state.is_admin:
            pib_list = sorted(st.session_state.np_structure[c.COL_PIB].tolist())
            selected_pib_index = pib_list.index(
                st.session_state.current_np_pib) if st.session_state.current_np_pib in pib_list else 0
            selected_pib = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –ù–ü –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (—Ä–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞):", pib_list,
                                        index=selected_pib_index)
        else:
            selected_pib = st.session_state.logged_in_user

        if selected_pib != st.session_state.current_np_pib:
            get_current_np_data_row(selected_pib)
            st.rerun()

        if not st.session_state.np_form_data or st.session_state.np_form_data.get(c.COL_PIB) != selected_pib:
            get_current_np_data_row(selected_pib)

        render_np_input_form_main()

    elif choice == "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ù–ü" and st.session_state.is_admin:
        st.header("–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ù–∞—É–∫–æ–≤–∏—Ö –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
        # –§—ñ–ª—å—Ç—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –ù–ü
        pib_list = sorted(st.session_state.np_structure[c.COL_PIB].tolist())
        selected_pibs = st.multiselect("–û–±–µ—Ä—ñ—Ç—å –ù–ü –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É", pib_list, default=pib_list[:5])

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–≤–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ (–ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ calc.calculate_all_scores_for_np –ø—Ä–∞—Ü—é—î)
        full_ratings = st.session_state.np_ratings.copy()
        for idx, row in full_ratings.iterrows():
            full_ratings.iloc[idx] = calc.calculate_all_scores_for_np(row)

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ–±—Ä–∞–Ω–∏–º–∏ –ù–ü
        filtered_ratings = full_ratings[full_ratings[c.COL_PIB].isin(selected_pibs)]

        # –í–∏–±—ñ—Ä —Ç–∏–ø—É –≥—Ä–∞—Ñ—ñ–∫–∞
        chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞", ["bar", "pie", "line"], index=0)

        if chart_type == "bar":
            # –ë–∞—Ä-–≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –±–∞–ª—ñ–≤
            # –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º —á–µ—Ä–µ–∑ joinaggregate (–¥–æ–¥–∞—î –ø–æ–ª–µ mean_IB_total –¥–æ –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞)
            bar_chart = alt.Chart(filtered_ratings).transform_joinaggregate(
                mean_IB_total=f"mean({c.NP_COL_IB_TOTAL})"
            ).mark_bar(opacity=0.7).encode(
                x=alt.X(c.COL_PIB, sort='-y', axis=alt.Axis(labelAngle=-45)),
                y=alt.Y(c.NP_COL_IB_TOTAL, title="–ë–∞–ª–∏ (–Ü–ë = –ü–ü + –ù–¢–† + –û–†)"),
                color=alt.condition(
                    alt.datum[c.NP_COL_IB_TOTAL] > alt.datum.mean_IB_total,
                    alt.value("#FFD700"),  # –≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ ‚Äî –∑–æ–ª–æ—Ç–∏–π
                    alt.value("#808080")  # –Ω–∏–∂—á–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ ‚Äî —Å—ñ—Ä–∏–π
                ),
                tooltip=[c.COL_PIB, alt.Tooltip(c.NP_COL_IB_TOTAL, format=".2f")]
            ).properties(height=400, width=800)
            st.altair_chart(bar_chart, use_container_width=True)

        elif chart_type == "pie":
            # Pie-–≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –±–∞–ª—ñ–≤ –ø–æ –±–ª–æ–∫–∞—Ö (—Å—É–º–∞ –ø–æ –≤—Å—ñ—Ö –æ–±—Ä–∞–Ω–∏—Ö –ù–ü)
            pie_df = pd.DataFrame({
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è": ["–ü–ü", "–ù–¢–†", "–û–†"],
                "–ë–∞–ª–∏": [
                    filtered_ratings[c.NP_COL_PP_TOTAL].sum(),
                    filtered_ratings[c.NP_COL_NTR_TOTAL].sum(),
                    filtered_ratings[c.NP_COL_OR_TOTAL].sum()
                ]
            })
            pie_chart = alt.Chart(pie_df).mark_arc().encode(
                theta="–ë–∞–ª–∏:Q",
                color=alt.Color("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:N", scale=alt.Scale(range=["#FFD700", "#3E3C36", "#228B22"])),
                tooltip=["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ë–∞–ª–∏"]
            ).properties(title="–†–æ–∑–ø–æ–¥—ñ–ª –±–∞–ª—ñ–≤ –∑–∞ –±–ª–æ–∫–∞–º–∏")
            st.altair_chart(pie_chart, use_container_width=True)

        elif chart_type == "line":
            # –õ—ñ–Ω—ñ—è –¥–ª—è –¥–∏–Ω–∞–º—ñ–∫–∏ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ "–ü–µ—Ä—ñ–æ–¥" —É np_ratings)
            if c.NP_COL_PERIOD not in st.session_state.np_ratings.columns:
                st.warning("–î–ª—è –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–æ–¥–∞–π—Ç–µ –∫–æ–ª–æ–Ω–∫—É '–ü–µ—Ä—ñ–æ–¥' (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '2024', '2025') —É np_ratings.")
            else:
                line_df = filtered_ratings.groupby(c.NP_COL_PERIOD)[c.NP_COL_IB_TOTAL].mean().reset_index()
                line_chart = alt.Chart(line_df).mark_line(color="#FFD700").encode(
                    x=c.NP_COL_PERIOD,
                    y=alt.Y(c.NP_COL_IB_TOTAL, title="–°–µ—Ä–µ–¥–Ω—ñ–π –Ü–ë"),
                    tooltip=[c.NP_COL_PERIOD, alt.Tooltip(c.NP_COL_IB_TOTAL, format=".2f")]
                ).properties(height=300)
                st.altair_chart(line_chart, use_container_width=True)

        st.markdown("---")
        # üìã –¢–∞–±–ª–∏—Ü—è –∑ –∫—Ä–∞—Å–∏–≤–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        st.dataframe(with_pretty_headers(filtered_ratings), use_container_width=True)

        # ‚¨áÔ∏è –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —É —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ
        csv_hr = with_pretty_headers(filtered_ratings).to_csv(index=False, encoding="utf-8-sig")
        st.download_button(
            "‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
            csv_hr,
            "—Ä–µ–π—Ç–∏–Ω–≥_–Ω–∞—É–∫–æ–≤–∏—Ö_–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.csv",
            "text/csv"
        )

        # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–æ–∫–∞–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        # st.dataframe(filtered_ratings)
        #st.dataframe(st.session_state.np_ratings)

    elif choice == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü" and st.session_state.is_admin:
        st.header("–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º –ù–∞—É–∫–æ–≤–∏—Ö –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
        with st.expander("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –ù–ü"):
            new_pib = st.text_input("–ü–Ü–ë")
            new_pos = st.text_input("–ü–æ—Å–∞–¥–∞")
            if st.button("–î–æ–¥–∞—Ç–∏"):
                if new_pib and new_pos and new_pib not in st.session_state.np_structure[c.COL_PIB].values:
                    new_row = pd.DataFrame([{'–ü–Ü–ë': new_pib, '–ü–æ—Å–∞–¥–∞': new_pos}])
                    st.session_state.np_structure = pd.concat([st.session_state.np_structure, new_row], ignore_index=True)
                    dm.save_np_structure(st.session_state.np_structure)
                    st.session_state.np_ratings = dm.initialize_np_ratings_df(st.session_state.np_structure)
                    dm.save_np_ratings(st.session_state.np_ratings)
                    st.success(f"–î–æ–¥–∞–Ω–æ: {new_pib}")
                    st.rerun()
                else:
                    st.warning("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –∞–±–æ —Ç–∞–∫–∏–π –ü–Ü–ë –≤–∂–µ —ñ—Å–Ω—É—î.")

        st.dataframe(st.session_state.np_structure)

# --- –ì–æ–ª–æ–≤–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –¥–æ–¥–∞—Ç–∫—É ---
if c.NP_COL_PERIOD not in st.session_state.np_ratings.columns:
    st.session_state.np_ratings[c.NP_COL_PERIOD] = str(datetime.now().year)
    dm.save_np_ratings(st.session_state.np_ratings)

if st.session_state.logged_in_user is None:
    login_screen()
else:
    main_app()
